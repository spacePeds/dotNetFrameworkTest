/**
 * https://medium.com/velotio-perspectives/how-to-write-jenkinsfile-for-angular-and-net-based-applications-1cbdbf56f906
 *
 * https://www.youtube.com/watch?v=7KCS70sCoK0&t=748s
 */

 //globall define
def gv
pipeline {
    //job agent
    agent { label "windows"}
    options {
        disableConcurrentBuilds()
    }
    //custom variables
    environment {
        START_TIME = new Date().format('yyyy-MM-dd HH:mm:ss')
        PROJECT_VERSION = '1.0.2'
    }
    stages {
        stage("init and Clean Workspace") {
            steps {
                //load external groovy script
                script {
                    gv = load "dotNetFrameworkTest/script.groovy"
                }
            }
        }
        stage('Environment Setup') {
            parallel {
                stage('dev'){
                    when {
                        expression {
                            env.GIT_BRANCH == 'origin/dev'
                        }
                    }
                    environment {
                        //bind the credentials to your env variables
                        PROJECT_CREDENTIALS_TEMP = credentials('MY_SECRET_CREDENTIALS')
                        
                    }
                    steps {
                        //echo "building branch: ${BRANCH_NAME}"
                        script {
                            //need to split the username and password credentials
                            //method one:
                            env.PROJECT_USERNAME = "${PROJECT_CREDENTIALS_TEMP_USR}"
                            env.PROJECT_PASSWORD = "${PROJECT_CREDENTIALS_TEMP_PSW}"
                            env.ENV_CONFIG_FILE = 'custom-dev.config'

                            //method two, use a wrapper:
                            //withCredentials([
                            //   usernamePassword(credentials: 'PROJECT_CREDENTIALS_TEMP', usernameVariable: PROJECT_USER, passwordVariable: PROJECT_PASSWORD)
                            //]) {
                            //    echo "Username 2: ${PROJECT_USER}"
                            //    echo "Password 2: ${PROJECT_PASSWORD}"
                            //}                    
                        }
                    }
                }
                
            }
        }
        stage('Inject Credentials') {
            steps {
                contentReplace (
                    configs: [
                        //Set the proper configuration file to use in the specified environment
                        fileContentReplaceConfig(
                            configs: [
                                fileContentReplaceItemConfig(
                                    search: 'custom-local.config',
                                    replace: "${ENV_CONFIG_FILE}",
                                    matchCount: 1
                                )
                            ],
                            fileEncoding: 'UTF-8',
                            filePath: 'dotNetFrameworkTest/Web.config'
                        ),
                        //inject the specified configuration file with the proper credentials from jenkins
                        fileContentReplaceConfig(
                            configs: [
                                fileContentReplaceItemConfig(
                                    search: 'JENKINS_INJECTED_VALUE',
                                    replace: "${PROJECT_PASSWORD}",
                                    matchCount: 1
                                )
                            ],
                            fileEncoding: 'UTF-8',
                            filePath: "dotNetFrameworkTest/config/${ENV_CONFIG_FILE}"
                        )
                    ]
                )
            }
        }
        stage('Restore packages'){
            steps{
                //.dotNet core version
                //bat "dotnet restore dotNetFrameworkTest\\dotNetFrameworkTest.csproj"
                //framework version
                bat "D:\\jenkinsWork\\nuget.exe locals all -clear"
                bat "D:\\jenkinsWork\\nuget.exe restore"
            }
        }
        //stage('Clean'){
        //    steps{
        //     //core version   
        //     bat "dotnet clean dotNetFrameworkTest\\dotNetFrameworkTest.csproj"
        //    }
        //}
        stage('Build') {
            steps {
                //core version
                bat "dotnet build dotNetFrameworkTest\\dotNetFrameworkTest.csproj --configuration Release"
                //gv.buildApp()
                bat """
                    "D:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\MSBuild\\Current\\Bin\\MSBuild.exe" /t:rebuild,restore
                """
            }
        }
        // stage('Publish'){
        //     //dotNetFrameworkTest\\dotNetFrameworkTest.csproj
        //     steps{
        //         //.net core version
        //         //bat "dotnet publish YourProjectPath\\Your_Project.csproj "

        //         //framework version
        //         //dotNetFrameworkTest\\dotNetFrameworkTest.csproj
        //         //https://blog.couchbase.com/continuous-deployment-with-jenkins-and-net/
            
        //         //"C:\\Program Files (x86)\\IIS\\Microsoft Web Deploy V3\\msdeploy.exe" -verb:sync -source:package="dotNetFrameworkTest.zip" -dest:auto,computerName="192.168.1.30>",userName=administrator,password="supersecret",authType=NTLM -allowUntrusted=true
        //         //    gv.buildApp()
        //}
        // }
        
    }
    post {
        failure {
            mail (to: 'lpedley@good-sam.com',
                 subject: "Job '${JOB_NAME}' (${BUILD_NUMBER}) Failed",
                 body: "Please go to ${BUILD_URL} and verify the build");
        }
    }
}
